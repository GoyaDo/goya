---
description: 
globs: 
alwaysApply: true
---
# Java 编程语言规范

## 1. 代码风格

- **缩进:** 使用 4 个空格进行缩进，而不是制表符。
- **括号:**
  - 类、方法和控制流语句（`if`, `for`, `while` 等）的左大括号 `{` 放在同一行的末尾，与语句头用一个空格分隔。
  - 右大括号 `}` 独占一行。
  - 示例：
    ```java
    public class MyClass {
        public void myMethod() {
            if (condition) {
                // ...
            }
        }
    }
    ```
- **空格:**
  - 运算符两边应有空格（`a + b`）。
  - 逗号 `,` 和分号 `;` 后应有空格。
  - 方法参数之间应有空格。
  - 关键字（`if`, `for`, `while` 等）后应有空格。
- **空行:**
  - 方法之间、类成员之间、逻辑块之间应适当使用空行以提高可读性。
  - 不应有连续的多个空行。
- **行长度:** 建议单行代码长度不超过 120 个字符。

## 2. 注释规范

- **类注释:** 所有公共类应包含 Javadoc 注释，说明类的目的、作者和版本。
- **方法注释:** 所有公共方法应包含 Javadoc 注释，说明方法的功能、参数、返回值和可能抛出的异常。
- **变量注释:** 必要时对复杂或不明显的变量进行单行注释。
- **TODO/FIXME 注释:** 使用 `// TODO:` 或 `// FIXME:` 标记待办事项或需要修复的问题，并附上说明和你的姓名/日期。

## 3. 异常处理

- **捕获特定异常:** 避免捕获过于宽泛的 `Exception`，应捕获更具体的异常类型。
- **不要忽略异常:** 不要捕获异常后不作任何处理（空 `catch` 块），至少应打印日志。
- **自定义异常:** 对于业务异常，应定义自定义异常类。
- **资源关闭:** 使用 `try-with-resources` 语句确保资源（如流、连接）正确关闭。

## 4. 日志规范

- **日志框架:** 统一使用 SLF4J 接口，底层实现可以是 Logback 或 Log4j2。
- **日志级别:**
  - `DEBUG`: 调试信息，开发阶段使用。
  - `INFO`: 运行时关键事件，例如服务启动、重要业务流程完成。
  - `WARN`: 潜在问题，但不影响程序正常运行，例如配置错误、不推荐的用法。
  - `ERROR`: 运行时错误，导致程序无法正常运行，例如异常堆栈。
- **日志内容:** 日志信息应清晰、简洁、包含关键上下文信息，避免记录敏感数据。

## 5. 面向对象设计

- **单一职责原则 (SRP):** 一个类或模块只负责一个功能或职责。
- **开闭原则 (OCP):** 对扩展开放，对修改关闭。
- **里氏替换原则 (LSP):** 子类型必须能够替换掉它们的基类型。
- **接口隔离原则 (ISP):** 客户端不应该依赖它不需要的接口。
- **依赖倒置原则 (DIP):** 高层模块不应该依赖低层模块，两者都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。

## 6. 其他

- **避免魔法值:** 使用常量或枚举代替代码中的字面值。
- **尽早失败:** 对于输入参数校验，应在方法开始时进行，尽早抛出异常。
- **使用建造者模式:** 对于构造参数较多的对象，考虑使用建造者模式。
- **使用 Optional:** 避免返回 `null`，可以使用 `Optional` 类来处理可能为空的值。